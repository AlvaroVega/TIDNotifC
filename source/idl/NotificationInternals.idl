//////////////////////////////////////////////////////////////////////////
//
// File          : NotificationInternals.idl
// Description   : TIDNotification server internal API
//                 
// Author/s      : Alvaro Rodriguez
// Project       : 
// Rel           : 01.00
// Created       : 22/11/00
// Revision Date : 30/11/05 
// Rev. History  : Juan A. Caceres remove distribution and draft API
//
// Copyright 2005 Telefonica, I+D. All Rights Reserved.
//
// The copyright of the software program(s) is property of Telefonica.
// The program(s) may be used, modified and/or copied only with the 
// express written consent of Telefonica or in acordance with the terms 
// and conditions stipulated in the agreement/contract under which 
// the program(s) have been supplied.
//
///////////////////////////////////////////////////////////////////////////


#ifndef _NotificationInternals_idl_
#define _NotificationInternals_idl_

#include <CosNotifyChannelAdmin.idl>
//#include <CosLifeCycle.idl>

#pragma prefix "tid.es"

module NotificationInternals {

  interface InternalProxyPushConsumer 
  	: CosNotifyChannelAdmin::ProxyPushConsumer,
          CosNotifyChannelAdmin::StructuredProxyPushConsumer,
          CosEventChannelAdmin::ProxyPushConsumer
  {
    /**
     * Internal Push, used by push to improve performance for clients
     */
     
    oneway void ipush(in any data); // obsolete??
    
    /**
     * Destroyed in shutdown
     */
    void destroyFromAdmin();

    /**
     * Persistende management
     */
    void loadData();
  };
  
  
  interface InternalProxyPushSupplier
      : CosNotifyChannelAdmin::ProxyPushSupplier,
        CosNotifyChannelAdmin::StructuredProxyPushSupplier,
        CosEventChannelAdmin::ProxyPushSupplier

  {
    /**
     * Event distribution form channel
     */
    oneway void push_event(in any data); 
    
    /**
     * Destroyed in shutdown
     */
    void destroyFromAdmin();

    /**
     * Persistende management
     */
    void loadData();

  };

  //   typedef string AdminId;
  //   typedef string ProxyId;

  //  exception InvalidCriteria { CosLifeCycle::Criteria invalid_criteria; };
  
  interface InternalSupplierAdmin: CosNotifyChannelAdmin::SupplierAdmin {
    /**
     * Event Distribution
     */
    void push_event(in any data); 
    
    CosNotifyChannelAdmin::AdminID getAdminId();

    //  void setSupplierAdminChild( in InternalSupplierAdmin child );
    //  void setSupplierAdminParent( in InternalSupplierAdmin child );
    
    // TODO: check if it is necessary
    //  boolean meetCriteria(in CosLifeCycle::Criteria the_criteria)
    //                       raises (InvalidCriteria);
                            
    //     string removeProxyPushConsumer( in ProxyId id );
    //     string removeProxyPullConsumer( in ProxyId id );
    void removeProxyPushConsumer( in CosNotifyChannelAdmin::ProxyID id );
    void removeProxyPullConsumer( in CosNotifyChannelAdmin::ProxyID id );
    
    void destroyFromChannel();
    //  void destroyFromAdmin();
    //  oneway void destroySupplierAdmin();

    // Persistence Management
    void loadData();
  };
  
  interface InternalConsumerAdmin: CosNotifyChannelAdmin::ConsumerAdmin 
  {
    /**
     * Event distribution
     */
     
    oneway void dispatch_event(in any data); 
   
    //     AdminId getAdminId();
    CosNotifyChannelAdmin::AdminID getAdminId();
    
    // TODO: check if it is necessary
    //  boolean meetCriteria(in CosLifeCycle::Criteria the_criteria)
    //                       raises (InvalidCriteria);
                            
    //  string removeProxyPushSupplier( in ProxyId id );
    //  string removeProxyPullSupplier( in ProxyId id );
    //  void removeConsumerAdmin( in AdminId id );
    void removeProxyPushSupplier( in CosNotifyChannelAdmin::ProxyID id );
    void removeProxyPullSupplier( in CosNotifyChannelAdmin::ProxyID id );
    
    void destroyFromChannel();
    //  void destroyFromAdmin();    
    //  oneway void destroyConsumerAdmin();

    // Persistence management
    void loadData();
  };

  interface InternalDistributionChannel
    : CosNotifyChannelAdmin::EventChannel,  
      CosNotifyFilter::FilterFactory 
  {
 
    /**
     * Event distribution
     */
    oneway void dispatch_event(in any data); 
    
    //  void removeSupplierAdmin( in AdminId id );
    //  void removeConsumerAdmin( in AdminId id );
    //  void removeNewSupplierAdmin( in AdminId id );
    //  void removeNewConsumerAdmin( in AdminId id );
    //  void swapSupplierAdmin( in AdminId id );
    void removeSupplierAdmin( in CosNotifyChannelAdmin::AdminID id );
    void removeConsumerAdmin( in CosNotifyChannelAdmin::AdminID id );

    //  oneway void destroyChannel();

    // Persistence Management
    void loadData();
  };
  
};


#endif // NotificationInternals_idl

